openapi: 3.0.0
info:
  title: Global Stand Up API
  description: API Description for the Global Stand Up API endpoints
  version: 1.0.0
servers:
  - url: http://localhost:3001
    description: Local development server. Clone, install, and serve the code to test.
  - url: https://global-stand-up.herokuapp.com
    description: Live deployed production server running on heroku, connected to MongoDB Atlas.
paths:
  /api/users:
    get:
      tags:
        - Users
      description: GET all users
      responses:
        "200":
          description: OK
    post:
      tags:
        - Users
      description: POST a new user
      responses:
        "200":
          description: OK
  /api/users/{userId}:
    get:
      tags:
        - Users
      description: GET a single user by its _id and populated thought and friend data
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
    put:
      tags:
        - Users
      description: PUT to update a user by its _id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
    delete:
      tags:
        - Users
      description: DELETE to remove user by its _id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
  /api/users/{userId}/friends:
    post:
      tags:
        - Friends
      description: POST to add a new friend to a user's friend list
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
  /api/users/{userId}/friends/{friendId}:
    delete:
      tags:
        - Friends
      description: DELETE to remove a friend from a user's friend list
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: friendId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
  /api/thoughts:
    get:
      tags:
        - Thoughts
      description: GET to get all thoughts
      responses:
        "200":
          description: OK
    post:
      tags:
        - Thoughts
      description: POST to create a new thought
      responses:
        "200":
          description: OK
  /api/thoughts/{thoughtId}:
    get:
      tags:
        - Thoughts
      description: GET to get a single thought by its _id
      parameters:
        - name: thoughtId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
    put:
      tags:
        - Thoughts
      description: PUT to update a thought by its _id
      parameters:
        - name: thoughtId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
    delete:
      tags:
        - Thoughts
      description: DELETE to remove a thought by its _id
      parameters:
        - name: thoughtId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
  /api/thoughts/{thoughtId}/reactions:
    post:
      tags:
        - Reactions
      description: POST to create a reaction stored in a single thought's reactions array field
      parameters:
        - name: thoughtId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
  /api/thoughts/{thoughtId}/reactions/{reactionId}:
    delete:
      tags:
        - Reactions
      description: DELETE to pull and remove a reaction by the reaction's reactionId value
      parameters:
        - name: thoughtId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: reactionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
